type Query {
    info: String!
    messages(filter: String, skip: Int, first: Int, orderBy: MessageOrderByInput): Messages!
}

enum MessageOrderByInput {
    createdAt_DESC
    createdAt_ASC
    likes_DESC
    likes_ASC
    dislikes_DESC
    dislikes_ASC
}

type Mutation {
    postMessage(messageText: String!): Message!
    postReply(messageId: ID!, replyText: String!): Reply!
    updateLikes(id: ID!): Message!
    updateDislikes(id: ID!): Message!
}

type Subscription {
    newMessage: Message
    newReply: Reply
    newReaction: Message
}

type Messages {
    messageList: [Message!]!
    count: Int!
}

type Message {
    id: ID!
    messageText: String!
    likes: Int!
    dislikes: Int!
    replies: [Reply]
}

type Reply {
    id: ID!
    replyText: String!
    message: Message!
}
